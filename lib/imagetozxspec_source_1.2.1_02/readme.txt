Image to ZX Spectrum 1.2.1_02
-----------------------------

Legal / Disclaimer
------------------
This software is copyright Silent Software (Benjamin Brown) 2010 and 
is licenced under the GNU GPL 2.0. Please see the included licence 
readme for more details.
The source code is available separately from 
http://www.silentsoftware.co.uk.

Use at your own risk, no warranty is given that the software is fit 
for any purpose.

Distribution
------------
Distribution of the source and compiled code is granted to World of 
Spectrum (www.worldofspectrum.org) and Silent Software (Development) 
only.
Should you wish to distribute this software and are not either of
the above parties please provide a link to the software home page
http://www.silentdevelopment.co.uk - do not directly link to the
software zip distribution - leeching is not very polite. 
Alternatively, host the zip file yourself, but a link to the 
aforementioned website must be clearly visible near to the download
link. 
If you wish to distribute this via physical medium, e.g. CD please 
contact me instead - I want a copy of your mag/cd/disk/tape(?!) :))

Known Issues
------------
- Memory is a limiting factor to the size of the video or number of 
images that can be converted in a single go (see FAQ).
- A number of video formats cannot be converted - this is down to 
Java's poor cross platform codec support in JMF.
- Work in progress preview can go out of order occasionally (does not
affect final output). This is due to the multi-threaded approach as
locking the thread ordering with screen refresh will impede the 
performance.
- Images that are not resized and whose height or width cannot be 
divided by 8 will not have the last 8 pixels in the column or row 
(respectively) converted correctly since a colour attribute block
needs to be an entire 8x8 pixel block. This only affects non
resized images.

What is Image to ZX Spectrum?
-----------------------------
Image to ZX Spec(trum) is a small utility to convert image and video 
files to a REAL ZX Spectrum as a slideshow/video, to a Spectrum 
compatible file format for games development (SCREEN$ "scr" format) 
or create retro art posters (images of any size - memory limited - can 
have a Spectrum effect applied to them).

How to run
----------
If you have Java 1.6 installed just double click the Img2ZXSpec.jar
file (like you would a regular .exe file). If you don't have Java
you need to get it - http://www.java.com/getjava
The easiest way to learn how to use it is just to play with it, you
can even change most image options during image conversion.
For information on advanced features read on...

Image Processing Modes
----------------------
There are numerous image processing options, all of which are 
compatible with a real Spectrum, but I document the main
"highlights" here:

i) Dithering Modes
These are the error diffusion dithering "patterns" of dots you can 
see when an image is converted. There are a number of different 
patterns (algorithms) to choose from and all have different benefits. 
In general, the "Low Error Atkinson" and "Magic Square 4x4 
(Nasik)" tend to be the best monochrome and colour modes respectively, 
although you may need to enable some pre-processing options such as 
contrast change to get the best results especially for the non 
Ordered/Magic dithers. To see a preview of all dithering modes choose "View 
Dither Options" from the Options tool bar drop list. Note the dither preview 
cannot be used to preview frames from videos. 

ii) Colour Modes
Choose whether to have two colour dithered images "Monochrome" or
use "Full Colour" for the full Spectrum palette. Monochrome tends 
to make detail much easier to see but with the obvious colour
sacrifice. Monochrome conversion tends to be at least 3 times faster than 
colour mode conversion.

iii) Attribute Favouritism
A technical limitation of the ZX Spectrum was that it only had 15 colours 
(16 if you count black twice). These colours were divided into two sets 
which where generated by taking 8 initial colours with full
brightness and halving the voltage, producing another 7 (8) colours. 
Converted image colours can only be in one of these two sets. When the 
converter detects that pixels being analysed are in both sets it decides 
based on the favouristism mode which set it should use for the final result. 
The "favouristism" modes are Half Brightness, Full Brightness or Most Popular 
Colour, the latter mode determines the set for the whole 8x8 pixel attribute 
block by finding which set the most popular (frequentely occurring) colour is 
in. The half and full modes determine that if an analysed attribute block 
has both half or bright set colours then favour the user selected colour set. 
Finally, the "force" modes force all colours to either be in the half 
or full brightness set regardless, depending on which force option is chosen.

iv) Black Threshold
This determines the degree to which colours in the picture should be
considered as black for the purposes of the Monochrome colour mode.
The lower the value, the less colours are black (or whatever ink 
colour is chosen) and vice versa.

v) Intensity
This determines the extent to which an image will be dithered. The
lower the value, the less the dither. Increasing the intensity will
also increase the brightness of the image (a side effect).


Image Converting Modes
----------------------
There are currently three image output modes

i) PNG/JPEG (.png/.jpg)
These are currently the only true image formats available. PNG has one
benefit over JPEG format in that it does not suffer image degradation
so it has been chosen as the default image format. Enabling the 256x192 
resize option will force all images to be reduced to this size, 
otherwise images can be as large as memory allows.

ii) SCR (.scr/screen)
This is the file format representing a snapshot of a real Spectrum's
graphics memory area. This is not much use without a special file 
viewer. Images using this format will automatically be resized to
256x192 pixels.

iii) TAP (.tap/tape file) 
This is for the real enthusiasts. Using this option will convert your
images to a slideshow, prepared as a ".tap" file suitable for emulators
or with conversion, real Spectrum hardware. On loading you will be
presented with a prompt informing you that it is the Image to ZX Spec
program and that you can choose the delay between images (or frames in
the case of video) for the slideshow.

Other Options
-------------
i) Tape/SlideShow/Video Loader
This is the ZX Spectrum software to load your converted images that is
saved in the .tap output file. Typically the "Simple" option will suffice
for Spectrum emulators. Buffered USR0 provides a better solution for a
real Spectrum and requires at least a 128K model to use, but removes
attribute flicker commonly seen during video playback. All built-in
loaders allow you to specify the frame delay between images showing before
the video/slideshow starts on the Spectrum. Alternatively you can add 
your own custom loader by choosing the "Custom" droplist option.
See the FAQ note for more information on video support.

ii) Video Sampling Rate
Converting video to a Spectrum requires some skill balancing the frame rate
so that playback speed is correct. Changing this value increases or reduces
the number of frames per second played back by the spectrum. Specify too
large an amount and a humble (real) Spectrum cannot keep up, too low an
amount causes the video to look (even more) jerky. This value closely ties
in with the frame delay value you must use with the video loader software
on the Spectrum. In an ideal world for 10 FPS video you would specify
10 as the "video sampling rate" and 5 for the "frame delay" in the Spectrum
video loader. The value 5 is determined because a PAL Spectrum has 50
screen refreshes per second and 50/10 = 5. Unfortunately real hardware often
can't keep up - see the FAQ for recommended values instead.

iii) Threads per CPU
Warning - do not change this setting during processing unless you want to
abort current work! This setting specifies how many threads convert images
at once PER CPU/CORE on your computer, so a droplist setting of 3 on a dual 
core machine is 6 threads. Usually the best settings for this are 1 or 2
for single cores and 2 or 3 for dual cores.
IMPORTANT - the more threads you have the more memory you will need 
simultaneously, this is especially important when you consider that the 
original sized image, the work in progress images and all the working is
held in memory at the same time until a result is produced! Use this setting
judiciously!

iv) Showing the Frames Per Second (FPS)
Enabling this will show on the work in progress preview the current rate at 
which images are being converted in real time. The calculation is worked out 
by taking an average every 2 seconds as to how much new completed work has been 
added to the work result queue. This option adds virtually no CPU overhead and
is useful for determining the best Threads per CPU value to use.

v) Showing the Work In Progress (WIP) Preview
This enables the preview of images being converted AND the FPS counter if it too
is enabled. Disabling this option may provide a small improvement to the 
conversion performance.

FAQ
---
i) My video won't convert!
This is usually down to two things:
- Java Media Framework (JMF) has limited codec compatibility (see "Known
Issues" higher up), typically the best thing to do is open your video in
VirtualDub and convert it to an uncompressed or Radius Cinepak codec AVI.
Whilst you're doing this reducing the image size to 256x192 will be useful 
as it will reduce the video buffering time of Image to ZX Spec.
A full list of JMF video (CROSS PLATFORM ONLY) codec formats is provided
here: 
http://java.sun.com/javase/technologies/desktop/media/jmf/2.1.1/formats.html
Note Motion JPEG doesn't seem to actually work at all :(

- Not enough PROCESS memory to load ALL of the UNCOMPRESSED video into RAM (32 
bit machines are limited to about 700Mb-1.2GB), 2-3 minutes is usually the 
maximum for these machines when using a high frame rate. 64 bit machines are 
limited by RAM and the Java settings but you can recompile ImageToZxSpecRunner 
with better heap settings if you wish to change this. Alternatively opening
a command prompt at the location of the jar file and typing
java -Xmx1500m Img2ZXSpec.jar 
where "1500" is the memory in megabytes should also work.

ii) What frame rate should the video be converted at and what rate should I 
use on the ZX Spectrum?
This rate may vary depending on how you are using the video - using the video 
player in an emulator, the Spectrum Video Loader's "Frame Delay" should 
typically be between 5 (exact) and 10 for 100% speed emulation using a "Video 
Sampling Rate" of 10 FPS.
On real hardware it has been determined for a 100% correct playback 
speed a frame rate of *7.14* FPS for the "Video Sampling Rate" and a value of 
*1* for the Spectrum Video Loader's "Frame Delay" is *usually* needed. This 
was tested using a Spectrum +3, a DivIDE Plus to play the video back from, and 
the Buffered USR 0 (128K) player.

iii) How do I write a custom loader?
The loaders can be written in Spectrum BASIC and typically converted by one
of the many .bas to .tap converters available on World of Spectrum. See the
Image to ZX Spec source code "simple.bas" text file for an example.

iv) Why do you spell Colour "colour", even in the source?
I am British, the Sinclair Spectrum is also British - I see no need for
American spellings :)

Any comments? Please drop them on my blog at
http://www.silentdevelopment.co.uk